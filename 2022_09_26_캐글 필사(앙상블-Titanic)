{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "14lF3EXrBpn3qK_ILA4oQv538f5HI7ePx",
      "authorship_tag": "ABX9TyM2YJprb1vqmL00NhXCxZBS",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jackie-Gung/Colab_ESAA/blob/main/2022_09_26_%EA%B3%BC%EC%A0%9C.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **1. 필요한 라이브러리 불러오기**\n",
        "---"
      ],
      "metadata": {
        "id": "UuezaVS0Pt2y"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 117,
      "metadata": {
        "id": "cHZAr8JFKh2Y"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from collections import Counter\n",
        "\n",
        "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\n",
        "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve\n",
        "\n",
        "sns.set(style='white', context='notebook', palette='deep')"
      ],
      "metadata": {
        "id": "QHVKakNsOkgn"
      },
      "execution_count": 118,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **2. 데이터 불러오기**\n",
        "---"
      ],
      "metadata": {
        "id": "PTmrPTDyPyG_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **1) 데이터 불러오기**"
      ],
      "metadata": {
        "id": "PZ5TX8_BP4ZA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train = pd.read_csv('/content/drive/MyDrive/train.csv')\n",
        "test = pd.read_csv('/content/drive/MyDrive/test.csv')"
      ],
      "metadata": {
        "id": "Nlj2lSyHPstP"
      },
      "execution_count": 119,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "IDtest = test['PassengerId']"
      ],
      "metadata": {
        "id": "aAuyM9sEhtKh"
      },
      "execution_count": 120,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 548
        },
        "id": "ORgnYmfh6a6n",
        "outputId": "df1cad11-a3cf-47f3-be73-18e7829b2271"
      },
      "execution_count": 121,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   PassengerId  Survived  Pclass  \\\n",
              "0            1         0       3   \n",
              "1            2         1       1   \n",
              "2            3         1       3   \n",
              "3            4         1       1   \n",
              "4            5         0       3   \n",
              "\n",
              "                                                Name     Sex   Age  SibSp  \\\n",
              "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
              "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
              "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
              "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
              "4                           Allen, Mr. William Henry    male  35.0      0   \n",
              "\n",
              "   Parch            Ticket     Fare Cabin Embarked  \n",
              "0      0         A/5 21171   7.2500   NaN        S  \n",
              "1      0          PC 17599  71.2833   C85        C  \n",
              "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
              "3      0            113803  53.1000  C123        S  \n",
              "4      0            373450   8.0500   NaN        S  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c46676d7-8453-4e2e-83f5-525c6b9cd7e6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c46676d7-8453-4e2e-83f5-525c6b9cd7e6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c46676d7-8453-4e2e-83f5-525c6b9cd7e6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c46676d7-8453-4e2e-83f5-525c6b9cd7e6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 354
        },
        "id": "AJ5tWg_Q6in3",
        "outputId": "b773ad84-1334-4d14-bbc2-58928bc1afb8"
      },
      "execution_count": 122,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   PassengerId  Pclass                                          Name     Sex  \\\n",
              "0          892       3                              Kelly, Mr. James    male   \n",
              "1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n",
              "2          894       2                     Myles, Mr. Thomas Francis    male   \n",
              "3          895       3                              Wirz, Mr. Albert    male   \n",
              "4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n",
              "\n",
              "    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n",
              "0  34.5      0      0   330911   7.8292   NaN        Q  \n",
              "1  47.0      1      0   363272   7.0000   NaN        S  \n",
              "2  62.0      0      0   240276   9.6875   NaN        Q  \n",
              "3  27.0      0      0   315154   8.6625   NaN        S  \n",
              "4  22.0      1      1  3101298  12.2875   NaN        S  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1b74aa39-700e-4f57-bf61-ef24d22bf65b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>892</td>\n",
              "      <td>3</td>\n",
              "      <td>Kelly, Mr. James</td>\n",
              "      <td>male</td>\n",
              "      <td>34.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>330911</td>\n",
              "      <td>7.8292</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>893</td>\n",
              "      <td>3</td>\n",
              "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
              "      <td>female</td>\n",
              "      <td>47.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>363272</td>\n",
              "      <td>7.0000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>894</td>\n",
              "      <td>2</td>\n",
              "      <td>Myles, Mr. Thomas Francis</td>\n",
              "      <td>male</td>\n",
              "      <td>62.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>240276</td>\n",
              "      <td>9.6875</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>895</td>\n",
              "      <td>3</td>\n",
              "      <td>Wirz, Mr. Albert</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>315154</td>\n",
              "      <td>8.6625</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>896</td>\n",
              "      <td>3</td>\n",
              "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
              "      <td>female</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3101298</td>\n",
              "      <td>12.2875</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b74aa39-700e-4f57-bf61-ef24d22bf65b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1b74aa39-700e-4f57-bf61-ef24d22bf65b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1b74aa39-700e-4f57-bf61-ef24d22bf65b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 122
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **데이터 설명**\n",
        "      1. PassengerId: 탑승자 아이디\n",
        "      2. Pclass: 1=1등석,2=2등석,3=3등석\n",
        "      3. Name, Sex, Age: 이름,성별,나이\n",
        "      4. SibSp: 동승한 자매/배우자 수 \n",
        "      5. Parch: 동승한 부모/자식 수 \n",
        "      6. Ticket: 티켓 번호\n",
        "      7. Fare: 승객 요금\n",
        "      8. Cabin: 방 호수\n",
        "      9. Embarked: 탑승지 (C,Q,S)\n",
        "      10. Survived: 0=사망, 1=생존"
      ],
      "metadata": {
        "id": "vlfgN_ON8Pno"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-hsYFw9Q6nYE",
        "outputId": "765bebfb-a7ba-479e-86a2-226580c0c57b"
      },
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 891 entries, 0 to 890\n",
            "Data columns (total 12 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   PassengerId  891 non-null    int64  \n",
            " 1   Survived     891 non-null    int64  \n",
            " 2   Pclass       891 non-null    int64  \n",
            " 3   Name         891 non-null    object \n",
            " 4   Sex          891 non-null    object \n",
            " 5   Age          714 non-null    float64\n",
            " 6   SibSp        891 non-null    int64  \n",
            " 7   Parch        891 non-null    int64  \n",
            " 8   Ticket       891 non-null    object \n",
            " 9   Fare         891 non-null    float64\n",
            " 10  Cabin        204 non-null    object \n",
            " 11  Embarked     889 non-null    object \n",
            "dtypes: float64(2), int64(5), object(5)\n",
            "memory usage: 83.7+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QHEkukMb60E1",
        "outputId": "48a1e3d6-13df-47cc-f211-f711ebc09a5e"
      },
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 418 entries, 0 to 417\n",
            "Data columns (total 11 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   PassengerId  418 non-null    int64  \n",
            " 1   Pclass       418 non-null    int64  \n",
            " 2   Name         418 non-null    object \n",
            " 3   Sex          418 non-null    object \n",
            " 4   Age          332 non-null    float64\n",
            " 5   SibSp        418 non-null    int64  \n",
            " 6   Parch        418 non-null    int64  \n",
            " 7   Ticket       418 non-null    object \n",
            " 8   Fare         417 non-null    float64\n",
            " 9   Cabin        91 non-null     object \n",
            " 10  Embarked     418 non-null    object \n",
            "dtypes: float64(2), int64(4), object(5)\n",
            "memory usage: 36.0+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **2) outlier 확인 및 제거하기**"
      ],
      "metadata": {
        "id": "nsaTCQZuP6ba"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def detect_outliers(df,n,features):\n",
        "  outlier_indices = []\n",
        "\n",
        "  # iterate over features(columns)\n",
        "  for col in features:\n",
        "    # 1st qurtile (25%)\n",
        "    Q1 = np.percentile(df[col],25)\n",
        "    # 3rd qurtile (75%)\n",
        "    Q3 = np.percentile(df[col],75)\n",
        "    # Interquartile range (IQR)\n",
        "    IQR = Q3 - Q1\n",
        "\n",
        "    # outlier step\n",
        "    outlier_step = 1.5 * IQR\n",
        "\n",
        "    # outlier에 해당되는 columns index 반환하기\n",
        "    outlier_list_col = df[(df[col] < Q1 - outlier_step) | (df[col] > Q3 + outlier_step)].index\n",
        "\n",
        "    # outlier indices에 발견된 outlier 추가하기\n",
        "    outlier_indices.extend(outlier_list_col)\n",
        "\n",
        "  # 2개 이상의 outlier을 갖는 observation 선택하기\n",
        "  outlier_indices = Counter(outlier_indices) # counter(): 개수 세는 함수\n",
        "  multiple_outliers = list(k for k, v in outlier_indices.items() if v > n) # item(): key,value 쌍 얻는 함수\n",
        "\n",
        "  return multiple_outliers"
      ],
      "metadata": {
        "id": "aZd1eAFGhKHi"
      },
      "execution_count": 125,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Age, SibSp, Parch,Fare에서 outlier 확인하기\n",
        "Outliers_to_drop = detect_outliers(train,2,['Age', 'SibSp', 'Parch','Fare'])"
      ],
      "metadata": {
        "id": "btYh-Hzg6Sme"
      },
      "execution_count": 126,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train.loc[Outliers_to_drop]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 895
        },
        "id": "WPDZIUE0hKni",
        "outputId": "d61ff11f-93a3-49b3-9b3a-83d6fca78329"
      },
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     PassengerId  Survived  Pclass                               Name     Sex  \\\n",
              "27            28         0       1     Fortune, Mr. Charles Alexander    male   \n",
              "88            89         1       1         Fortune, Miss. Mabel Helen  female   \n",
              "159          160         0       3         Sage, Master. Thomas Henry    male   \n",
              "180          181         0       3       Sage, Miss. Constance Gladys  female   \n",
              "201          202         0       3                Sage, Mr. Frederick    male   \n",
              "324          325         0       3           Sage, Mr. George John Jr    male   \n",
              "341          342         1       1     Fortune, Miss. Alice Elizabeth  female   \n",
              "792          793         0       3            Sage, Miss. Stella Anna  female   \n",
              "846          847         0       3           Sage, Mr. Douglas Bullen    male   \n",
              "863          864         0       3  Sage, Miss. Dorothy Edith \"Dolly\"  female   \n",
              "\n",
              "      Age  SibSp  Parch    Ticket    Fare        Cabin Embarked  \n",
              "27   19.0      3      2     19950  263.00  C23 C25 C27        S  \n",
              "88   23.0      3      2     19950  263.00  C23 C25 C27        S  \n",
              "159   NaN      8      2  CA. 2343   69.55          NaN        S  \n",
              "180   NaN      8      2  CA. 2343   69.55          NaN        S  \n",
              "201   NaN      8      2  CA. 2343   69.55          NaN        S  \n",
              "324   NaN      8      2  CA. 2343   69.55          NaN        S  \n",
              "341  24.0      3      2     19950  263.00  C23 C25 C27        S  \n",
              "792   NaN      8      2  CA. 2343   69.55          NaN        S  \n",
              "846   NaN      8      2  CA. 2343   69.55          NaN        S  \n",
              "863   NaN      8      2  CA. 2343   69.55          NaN        S  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1664ae95-05de-4021-8cfb-fe061f639d8b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>28</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Fortune, Mr. Charles Alexander</td>\n",
              "      <td>male</td>\n",
              "      <td>19.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>19950</td>\n",
              "      <td>263.00</td>\n",
              "      <td>C23 C25 C27</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>88</th>\n",
              "      <td>89</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Fortune, Miss. Mabel Helen</td>\n",
              "      <td>female</td>\n",
              "      <td>23.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>19950</td>\n",
              "      <td>263.00</td>\n",
              "      <td>C23 C25 C27</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>159</th>\n",
              "      <td>160</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Sage, Master. Thomas Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>CA. 2343</td>\n",
              "      <td>69.55</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>180</th>\n",
              "      <td>181</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Sage, Miss. Constance Gladys</td>\n",
              "      <td>female</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>CA. 2343</td>\n",
              "      <td>69.55</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>201</th>\n",
              "      <td>202</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Sage, Mr. Frederick</td>\n",
              "      <td>male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>CA. 2343</td>\n",
              "      <td>69.55</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>324</th>\n",
              "      <td>325</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Sage, Mr. George John Jr</td>\n",
              "      <td>male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>CA. 2343</td>\n",
              "      <td>69.55</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>341</th>\n",
              "      <td>342</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Fortune, Miss. Alice Elizabeth</td>\n",
              "      <td>female</td>\n",
              "      <td>24.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>19950</td>\n",
              "      <td>263.00</td>\n",
              "      <td>C23 C25 C27</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>792</th>\n",
              "      <td>793</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Sage, Miss. Stella Anna</td>\n",
              "      <td>female</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>CA. 2343</td>\n",
              "      <td>69.55</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>846</th>\n",
              "      <td>847</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Sage, Mr. Douglas Bullen</td>\n",
              "      <td>male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>CA. 2343</td>\n",
              "      <td>69.55</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>863</th>\n",
              "      <td>864</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Sage, Miss. Dorothy Edith \"Dolly\"</td>\n",
              "      <td>female</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>CA. 2343</td>\n",
              "      <td>69.55</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1664ae95-05de-4021-8cfb-fe061f639d8b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1664ae95-05de-4021-8cfb-fe061f639d8b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1664ae95-05de-4021-8cfb-fe061f639d8b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 127
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **분석:** 10개의 outliers 발견 (28,89,342는 high Ticket Fare / 나머지 7명은 high values of SibSp)"
      ],
      "metadata": {
        "id": "T0izka8A71GN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# outlier 버리기\n",
        "train = train.drop(Outliers_to_drop, axis=0).reset_index(drop=True)"
      ],
      "metadata": {
        "id": "C6U5-IlNhKlB"
      },
      "execution_count": 128,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **3) 학습/테스트 데이터 합치기**"
      ],
      "metadata": {
        "id": "xNZ3oPAj9TrJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "- 카테고리 변환하는 동안 같은 수의 피처를 갖기 위해-> feature engineering에서 확인"
      ],
      "metadata": {
        "id": "i-wwWJam9Ym5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_len = len(train)\n",
        "dataset = pd.concat(objs = [train,test],axis=0).reset_index(drop=True)"
      ],
      "metadata": {
        "id": "WPni3ZELhKiw"
      },
      "execution_count": 129,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **4) Null or Missing value 확인하기**"
      ],
      "metadata": {
        "id": "z5cFoVf393hw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# NaN이나 빈 데이터는 NaN으로 채우기\n",
        "dataset = dataset.fillna(np.nan)\n",
        "\n",
        "# Null 값 확인하기\n",
        "dataset.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "If7Waj0DhKga",
        "outputId": "29414ccc-9ec4-4278-a890-f7a1a5b5f71f"
      },
      "execution_count": 130,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId       0\n",
              "Survived        418\n",
              "Pclass            0\n",
              "Name              0\n",
              "Sex               0\n",
              "Age             256\n",
              "SibSp             0\n",
              "Parch             0\n",
              "Ticket            0\n",
              "Fare              1\n",
              "Cabin          1007\n",
              "Embarked          2\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 130
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "- 분석: age와 cabin이 missing value가 많음"
      ],
      "metadata": {
        "id": "0luff6g0-J29"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **3. 피처 분석**\n",
        "---"
      ],
      "metadata": {
        "id": "0i8Ad-Gh-bqo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **1) 연속형 변수**"
      ],
      "metadata": {
        "id": "9jSpObrx-pc6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.heatmap(train[['Survived','SibSp','Parch','Age','Fare']].corr(),annot=True,fmt='.2f',cmap='coolwarm')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "DOVLgxZNhKd5",
        "outputId": "0b44b646-a68d-4aeb-a41a-b7d427994899"
      },
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **분석:** Fare만 Survived에 큰 상관관계가 있는 것으로 보임"
      ],
      "metadata": {
        "id": "uaucqybu_DDb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##### **(1) SibSP**"
      ],
      "metadata": {
        "id": "oSHccxsI_MrC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.factorplot(x='SibSp',y='Survived',data=train,kind='bar',size=6,palette='muted')\n",
        "g.despine(left=True) # despine: 축/테두리 제거\n",
        "g = g.set_ylabels('survival probability')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "id": "C7j5WWiIhKbp",
        "outputId": "9095e4ea-bcba-43b9-9bc4-0fadf28e31e4"
      },
      "execution_count": 132,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3717: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
            "  warnings.warn(msg)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3723: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n",
            "  warnings.warn(msg, UserWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **분석:**\n",
        "      1. 형제자매나 배우자가 많을 경우 생존 확률이 낮음\n",
        "      2. 혼자이거나 일행이 2명 이하일 경우에 생존했을 확률이 높음\n",
        "      3. 이 사실은 꽤 흥미롭기 때문에 추후에 새로운 범주형 변수를 만들 예정임(feature engineering에서 확인)"
      ],
      "metadata": {
        "id": "NKii6OY1AjqU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##### **(2) Parch**"
      ],
      "metadata": {
        "id": "k555ztVTA_Po"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.factorplot(x='Parch',y='Survived',data=train,kind='bar',size=6,palette='muted')\n",
        "g.despine(left=True) \n",
        "g= g.set_ylabels('survival probability')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "id": "PbM-QGPkhKZY",
        "outputId": "b6c12466-0cf3-4a34-afc1-a7a83a5488f6"
      },
      "execution_count": 133,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3717: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
            "  warnings.warn(msg)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3723: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n",
            "  warnings.warn(msg, UserWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **분석:**\n",
        "      1. 가족 수가 적은 경우가 혼자이거나 가족수가 적당,많을 때보다 생존 확률이 높음\n",
        "      2. 유의할 점: 3명의 부모 또는 아이가 있는 승객의 생존률의 표준편차가 중요함"
      ],
      "metadata": {
        "id": "IvR_brn6BU-_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##### **(3) Age**"
      ],
      "metadata": {
        "id": "MBWt-stdBseC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.FacetGrid(train,col='Survived')\n",
        "g = g.map(sns.distplot, 'Age')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 314
        },
        "id": "nrNWZ4KzhKXJ",
        "outputId": "30ee6aa5-3a8a-44d5-9342-c0763ea8f7b1"
      },
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x216 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **분석:**\n",
        "      1. 가우시안 분포로 보임\n",
        "      2. 생존한 경우와 사망한 경우의 나이 분포가 일치하지 않음\n",
        "      3. 생존한 사람들 중 젊은층에서 피크를 찍음\n",
        "      4. 60-80대는 낮은 생존률을 보임\n",
        "      5. 나이도 생존률에 큰 영향을 미치지 않기에 우리는 더 많이 혹은 더 적게 생존한 나이대가 있을 것으로 예상함"
      ],
      "metadata": {
        "id": "eU0w0NXzB6xR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 나이 분포 세밀하게 알아보기\n",
        "# kdeplot(): 커널밀도추정 -> 주로 분포 확인할 때 많이 쓰는 함수\n",
        "g = sns.kdeplot(train['Age'][(train['Survived']==0) & (train['Age'].notnull())],color='Red',shade=True)\n",
        "g = sns.kdeplot(train['Age'][(train['Survived']==1) & (train['Age'].notnull())],ax=g, color='Blue',shade=True)\n",
        "\n",
        "g.set_xlabel('Age')\n",
        "g.set_ylabel('Frequency')\n",
        "g = g.legend(['Not Survived', 'Survived'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "id": "TBfUp65phKU7",
        "outputId": "9e5a08a7-7a16-4cbb-eded-57bf3f0d890a"
      },
      "execution_count": 135,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##### **(4) Fare**"
      ],
      "metadata": {
        "id": "xkTpV3CeGPKN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataset['Fare'].isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YgBLPz-jhKSb",
        "outputId": "7984eb81-485a-4a53-f152-fc1c7615292f"
      },
      "execution_count": 136,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 136
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 결측치를 중앙값으로 대체하기\n",
        "dataset['Fare'] = dataset['Fare'].fillna(dataset['Fare'].median())"
      ],
      "metadata": {
        "id": "pFXMcjwnhKMJ"
      },
      "execution_count": 137,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Fare 분포 세밀하게 알아보기\n",
        "g = sns.distplot(dataset['Fare'],color='m',label='Skewness: %.2f'%(dataset['Fare'].skew()))\n",
        "g = g.legend(loc='best')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 341
        },
        "id": "wzBdRy1SH18T",
        "outputId": "95928eb5-2463-411c-eedb-fd4b18d3ac66"
      },
      "execution_count": 138,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **분석:** 굉장히 편중되어 있음 -> 로그 변환하기\n"
      ],
      "metadata": {
        "id": "YqNDIc4HI9lC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 로그 변환하기\n",
        "dataset['Fare'] = dataset['Fare'].map(lambda i: np.log(i) if i > 0 else 0)"
      ],
      "metadata": {
        "id": "ic1mt-lfH15y"
      },
      "execution_count": 139,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.distplot(dataset['Fare'],color='b',label='Skewness : %.2f'%(dataset['Fare'].skew()))\n",
        "g = g.legend(loc='best')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 341
        },
        "id": "Vh0xVT8uH10z",
        "outputId": "fd00d49b-088c-4c03-97a8-03c7af4ee3da"
      },
      "execution_count": 140,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **2) 범주형 변수**"
      ],
      "metadata": {
        "id": "AmB52YysPsYs"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##### **(1)Sex**"
      ],
      "metadata": {
        "id": "eOs6m18jP0r2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.barplot(x='Sex',y='Survived',data=train)\n",
        "g = g.set_ylabel('Survival Probability')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "id": "rU1jTF9vH1wz",
        "outputId": "6d8d2f9f-11f3-45a3-90ea-96edc10bbe7e"
      },
      "execution_count": 141,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train[['Sex','Survived']].groupby('Sex').mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "K3OsVtIlH1uM",
        "outputId": "3b2bbfd2-d3fd-4134-975b-dec2e9d775c8"
      },
      "execution_count": 142,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Survived\n",
              "Sex             \n",
              "female  0.747573\n",
              "male    0.190559"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-98d93d95-e940-46c2-b1a1-d174a0d03865\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sex</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>female</th>\n",
              "      <td>0.747573</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>male</th>\n",
              "      <td>0.190559</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-98d93d95-e940-46c2-b1a1-d174a0d03865')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-98d93d95-e940-46c2-b1a1-d174a0d03865 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-98d93d95-e940-46c2-b1a1-d174a0d03865');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 142
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **분석**\n",
        "      1. 여성보다 남성이 생존률이 많이 낮음\n",
        "      2. 성별은 생존에 큰 영향을 미칠 것으로 보임"
      ],
      "metadata": {
        "id": "t2N1FdIQRwsn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##### **(2) Pclass**"
      ],
      "metadata": {
        "id": "kk7NuCRnWhXG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.factorplot(x='Pclass',y='Survived',data=train,kind='bar',size=6,palette='muted')\n",
        "g.despine(left=True)\n",
        "g = g.set_ylabels('survival probability')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "id": "KHoXacn7H1od",
        "outputId": "93c17393-54e1-464b-c9a8-e65b5526dea2"
      },
      "execution_count": 143,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3717: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
            "  warnings.warn(msg)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3723: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n",
            "  warnings.warn(msg, UserWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.factorplot(x='Pclass',y='Survived',hue='Sex',data=train,kind='bar',size=6,palette='muted')\n",
        "g.despine(left=True)\n",
        "g = g.set_ylabels('survival probability')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "id": "-664QfheH1l1",
        "outputId": "33800748-240c-4d96-d4da-b2b6d8c58c3d"
      },
      "execution_count": 144,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3717: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
            "  warnings.warn(msg)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3723: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n",
            "  warnings.warn(msg, UserWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 509.975x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **분석:**\n",
        "      1. 1등석이 2,3등석보다 생존률이 높음\n",
        "      2. 단순히 두 성별을 동시에 봤을 때와는 다름"
      ],
      "metadata": {
        "id": "EEviXak7a_mI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##### (3) Embarked"
      ],
      "metadata": {
        "id": "akVonafzce37"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataset['Embarked'].isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p9FehnW5a1y0",
        "outputId": "f90b323b-b89b-46e4-add9-e152cff2ccf2"
      },
      "execution_count": 145,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 145
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 결측치를 최빈값으로 채우기\n",
        "dataset['Embarked'] = dataset['Embarked'].fillna('S')"
      ],
      "metadata": {
        "id": "X2565cIGa1w8"
      },
      "execution_count": 146,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.factorplot(x='Embarked',y='Survived',data=train,size=6,kind='bar',palette='muted')\n",
        "g.despine(left=True)\n",
        "g = g.set_ylabels('survival probability')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "id": "KkUNTh7Ua1vJ",
        "outputId": "b26034de-01f4-4567-f0eb-19ce9499f6af"
      },
      "execution_count": 147,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3717: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
            "  warnings.warn(msg)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3723: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n",
            "  warnings.warn(msg, UserWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.factorplot('Pclass',col='Embarked',data=train,size=6,kind='count',palette='muted')\n",
        "g.despine(left=True)\n",
        "g = g.set_ylabels('count')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 400
        },
        "id": "dxnNcTiKa1sv",
        "outputId": "54a08980-05c3-49ed-8994-33cd7e48db9e"
      },
      "execution_count": 148,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3717: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
            "  warnings.warn(msg)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3723: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n",
            "  warnings.warn(msg, UserWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1296x432 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **분석**\n",
        "      1. 3등석은 S와 Q에서, 1등석은 탑승지가 C인 대부분의 승객임\n",
        "      2. 저자의 예측: 1등석 승객들의 그들의 권력으로 생존할 때 우선시되었을 것."
      ],
      "metadata": {
        "id": "zTsedkasdwnb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **4. 결측치 채우기**\n",
        "---"
      ],
      "metadata": {
        "id": "RHwgymlAeNHK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **1) Age**"
      ],
      "metadata": {
        "id": "4gBf-2WZeZ_Z"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "      1. age는 256의 결측치를 가짐\n",
        "      2. age 변수를 없애는 것보단, 아이들과 같이 생존 확률이 높은 하위집단이 있으므로 결측치를 채우는 것이 좋을 것"
      ],
      "metadata": {
        "id": "72gAxG3iedB1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Age vs Sex, Parch, Pclass, SibSP\n",
        "g = sns.factorplot(y='Age',x='Sex',data=dataset,kind='box')\n",
        "g = sns.factorplot(y='Age',x='Sex',hue='Pclass',data=dataset,kind='box')\n",
        "g = sns.factorplot(y='Age',x='Parch',data=dataset,kind='box')\n",
        "g = sns.factorplot(y='Age',x='SibSp',data=dataset,kind='box')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "-gL1gc98a1qm",
        "outputId": "0c291785-9119-4636-8f3c-0225148aeb28"
      },
      "execution_count": 149,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3717: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
            "  warnings.warn(msg)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3717: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
            "  warnings.warn(msg)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3717: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
            "  warnings.warn(msg)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3717: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
            "  warnings.warn(msg)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 406.6x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **분석**\n",
        "      1. 나이 분포는 남여가 거의 동일한 것으로 보아 성별은 나이를 예측하기엔 주는 정보가 적음\n",
        "      2. 1등석 승객은 2,3등석보다 더 나이가 많음\n",
        "      3. 부모나 아이가 많을수록 나이가 많고, 형제자매나 배우자가 많을수록 나이가 어림"
      ],
      "metadata": {
        "id": "C6SZgrD-f-wu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Sex를 male:0, female:1로 바꾸기\n",
        "dataset['Sex'] = dataset['Sex'].map({'male':0, 'female':1})"
      ],
      "metadata": {
        "id": "VOtIbV3ka1oF"
      },
      "execution_count": 150,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.heatmap(dataset[['Age','Sex','SibSp','Parch','Pclass']].corr(),cmap='BrBG',annot=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "bcskLqu9a1l_",
        "outputId": "fae21aa2-96b2-4a19-c435-dddd090c0186"
      },
      "execution_count": 151,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# age 행의 결측치 인덱스\n",
        "index_NaN_age = list(dataset['Age'][dataset['Age'].isnull()].index)\n",
        "\n",
        "for i in index_NaN_age:\n",
        "  age_med = dataset['Age'].median()\n",
        "  age_pred = dataset['Age'][((dataset['SibSp'] == dataset.iloc[i]['SibSp'])&\n",
        "                             (dataset['Parch'] == dataset.iloc[i]['Parch'])&\n",
        "                             (dataset['Pclass'] == dataset.iloc[i]['Pclass']))].median()\n",
        "  if not np.isnan(age_pred):\n",
        "    dataset['Age'].iloc[i] = age_pred\n",
        "  else:\n",
        "    dataset['Age'].iloc[i] = age_med\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rvzjERaoa1kM",
        "outputId": "101f25ab-ee99-4a72-c4a3-0a71d06d64f6"
      },
      "execution_count": 152,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/numpy/lib/nanfunctions.py:1117: RuntimeWarning: Mean of empty slice\n",
            "  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self._setitem_single_block(indexer, value, name)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.factorplot(x=\"Survived\", y = \"Age\",data = train, kind=\"box\")\n",
        "g = sns.factorplot(x=\"Survived\", y = \"Age\",data = train, kind=\"violin\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 806
        },
        "id": "OQCNsVsPa1hd",
        "outputId": "d9728a13-dc8c-45bc-bed5-951a6a7f5efb"
      },
      "execution_count": 153,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3717: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
            "  warnings.warn(msg)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3717: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
            "  warnings.warn(msg)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **5. Feature Engineering**\n",
        "---"
      ],
      "metadata": {
        "id": "H5sDvysqqzNQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **1) Name/Title**"
      ],
      "metadata": {
        "id": "tJNVb-L5q2qE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataset['Name'].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9iYPUTqda1fR",
        "outputId": "93062b6d-9034-4921-9544-6e29eee1a63c"
      },
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0                              Braund, Mr. Owen Harris\n",
              "1    Cumings, Mrs. John Bradley (Florence Briggs Th...\n",
              "2                               Heikkinen, Miss. Laina\n",
              "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)\n",
              "4                             Allen, Mr. William Henry\n",
              "Name: Name, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 154
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_title = [i.split(',')[1].split('.')[0].strip() for i in dataset['Name']]\n",
        "dataset['Title'] = pd.Series(dataset_title)\n",
        "dataset['Title'].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CvePcUqsa1dN",
        "outputId": "7832c745-3d32-4d9f-c0ce-46772d9e61be"
      },
      "execution_count": 155,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      Mr\n",
              "1     Mrs\n",
              "2    Miss\n",
              "3     Mrs\n",
              "4      Mr\n",
              "Name: Title, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 155
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.countplot(x=\"Title\",data=dataset)\n",
        "g = plt.setp(g.get_xticklabels(), rotation=45) "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 333
        },
        "id": "akbZwoWda1bA",
        "outputId": "76eddbbb-c482-437b-82b7-d05243571476"
      },
      "execution_count": 156,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **분석:** 17개 중에서 4개를 제외하고는 거의 드문 케이스 -> 4개로만 나누기"
      ],
      "metadata": {
        "id": "mxNFM-tCrrzi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataset['Title'] = dataset['Title'].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n",
        "dataset[\"Title\"] = dataset[\"Title\"].map({\"Master\":0, \"Miss\":1, \"Ms\" : 1 , \"Mme\":1, \"Mlle\":1, \"Mrs\":1, \"Mr\":2, \"Rare\":3})\n",
        "dataset[\"Title\"] = dataset[\"Title\"].astype(int)"
      ],
      "metadata": {
        "id": "PnVO3n1qa1ZN"
      },
      "execution_count": 157,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.countplot(dataset[\"Title\"])\n",
        "g = g.set_xticklabels([\"Master\",\"Miss/Ms/Mme/Mlle/Mrs\",\"Mr\",\"Rare\"])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 341
        },
        "id": "7EKO2Tyca1Wm",
        "outputId": "16a2f23d-c945-430e-aee5-8c3c403f4f04"
      },
      "execution_count": 158,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.factorplot(x=\"Title\",y=\"Survived\",data=dataset,kind=\"bar\")\n",
        "g = g.set_xticklabels([\"Master\",\"Miss-Mrs\",\"Mr\",\"Rare\"])\n",
        "g = g.set_ylabels(\"survival probability\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        },
        "id": "oqIrdJp0a1U5",
        "outputId": "f8240d51-2a61-470d-9fca-2d4217b519b4"
      },
      "execution_count": 159,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3717: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
            "  warnings.warn(msg)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop Name variable\n",
        "dataset.drop(labels = [\"Name\"], axis = 1, inplace = True)"
      ],
      "metadata": {
        "id": "J4A27Ovla1Sh"
      },
      "execution_count": 160,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **2) Family size**"
      ],
      "metadata": {
        "id": "FwdzWbFNtpqV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# SibSp + Parch한 family size 변수 만들기\n",
        "dataset[\"Fsize\"] = dataset[\"SibSp\"] + dataset[\"Parch\"] + 1"
      ],
      "metadata": {
        "id": "w21Oan3Ia1Qa"
      },
      "execution_count": 161,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.factorplot(x=\"Fsize\",y=\"Survived\",data = dataset)\n",
        "g = g.set_ylabels(\"Survival Probability\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        },
        "id": "e0zuBWOua1Oc",
        "outputId": "8f9a8487-ab71-44ba-e1fc-08e9ad2b7d69"
      },
      "execution_count": 162,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3717: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
            "  warnings.warn(msg)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# family size 관련 새로운 피처 만들기\n",
        "dataset['Single'] = dataset['Fsize'].map(lambda s: 1 if s == 1 else 0)\n",
        "dataset['SmallF'] = dataset['Fsize'].map(lambda s: 1 if  s == 2  else 0)\n",
        "dataset['MedF'] = dataset['Fsize'].map(lambda s: 1 if 3 <= s <= 4 else 0)\n",
        "dataset['LargeF'] = dataset['Fsize'].map(lambda s: 1 if s >= 5 else 0)"
      ],
      "metadata": {
        "id": "6KVOikjza1MF"
      },
      "execution_count": 163,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.factorplot(x=\"Single\",y=\"Survived\",data=dataset,kind=\"bar\")\n",
        "g = g.set_ylabels(\"Survival Probability\")\n",
        "g = sns.factorplot(x=\"SmallF\",y=\"Survived\",data=dataset,kind=\"bar\")\n",
        "g = g.set_ylabels(\"Survival Probability\")\n",
        "g = sns.factorplot(x=\"MedF\",y=\"Survived\",data=dataset,kind=\"bar\")\n",
        "g = g.set_ylabels(\"Survival Probability\")\n",
        "g = sns.factorplot(x=\"LargeF\",y=\"Survived\",data=dataset,kind=\"bar\")\n",
        "g = g.set_ylabels(\"Survival Probability\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "HeaF0bboa1KL",
        "outputId": "8dd4fdb1-477b-4c0a-c14a-809b07fe9919"
      },
      "execution_count": 164,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3717: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
            "  warnings.warn(msg)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3717: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
            "  warnings.warn(msg)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3717: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
            "  warnings.warn(msg)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3717: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
            "  warnings.warn(msg)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset = pd.get_dummies(dataset, columns = [\"Title\"])\n",
        "dataset = pd.get_dummies(dataset, columns = [\"Embarked\"], prefix=\"Em\")"
      ],
      "metadata": {
        "id": "jIK2xttsa1IC"
      },
      "execution_count": 165,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "id": "cPLZyC0Ha1Fx",
        "outputId": "47798757-09b5-4aad-ee04-2465d5b77fc7"
      },
      "execution_count": 166,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   PassengerId  Survived  Pclass  Sex   Age  SibSp  Parch            Ticket  \\\n",
              "0            1       0.0       3    0  22.0      1      0         A/5 21171   \n",
              "1            2       1.0       1    1  38.0      1      0          PC 17599   \n",
              "2            3       1.0       3    1  26.0      0      0  STON/O2. 3101282   \n",
              "3            4       1.0       1    1  35.0      1      0            113803   \n",
              "4            5       0.0       3    0  35.0      0      0            373450   \n",
              "\n",
              "       Fare Cabin  ...  SmallF  MedF  LargeF  Title_0  Title_1  Title_2  \\\n",
              "0  1.981001   NaN  ...       1     0       0        0        0        1   \n",
              "1  4.266662   C85  ...       1     0       0        0        1        0   \n",
              "2  2.070022   NaN  ...       0     0       0        0        1        0   \n",
              "3  3.972177  C123  ...       1     0       0        0        1        0   \n",
              "4  2.085672   NaN  ...       0     0       0        0        0        1   \n",
              "\n",
              "   Title_3  Em_C  Em_Q  Em_S  \n",
              "0        0     0     0     1  \n",
              "1        0     1     0     0  \n",
              "2        0     0     0     1  \n",
              "3        0     0     0     1  \n",
              "4        0     0     0     1  \n",
              "\n",
              "[5 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d094a20a-849a-404c-b64e-1852448fda60\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>...</th>\n",
              "      <th>SmallF</th>\n",
              "      <th>MedF</th>\n",
              "      <th>LargeF</th>\n",
              "      <th>Title_0</th>\n",
              "      <th>Title_1</th>\n",
              "      <th>Title_2</th>\n",
              "      <th>Title_3</th>\n",
              "      <th>Em_C</th>\n",
              "      <th>Em_Q</th>\n",
              "      <th>Em_S</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>1.981001</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>4.266662</td>\n",
              "      <td>C85</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>2.070022</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>3.972177</td>\n",
              "      <td>C123</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>2.085672</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 22 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d094a20a-849a-404c-b64e-1852448fda60')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d094a20a-849a-404c-b64e-1852448fda60 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d094a20a-849a-404c-b64e-1852448fda60');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 166
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **3) Cabin**"
      ],
      "metadata": {
        "id": "wHcq3inluzE0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataset[\"Cabin\"].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "chwLXgWAuzf8",
        "outputId": "1974b7c3-1886-45b3-80e9-8d9c6d6dcee8"
      },
      "execution_count": 167,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     NaN\n",
              "1     C85\n",
              "2     NaN\n",
              "3    C123\n",
              "4     NaN\n",
              "Name: Cabin, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 167
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset[\"Cabin\"].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3WnoZLSruzaq",
        "outputId": "393d6f5f-9418-4b3d-ed30-8285ce6dd613"
      },
      "execution_count": 168,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count     292\n",
              "unique    186\n",
              "top        G6\n",
              "freq        5\n",
              "Name: Cabin, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 168
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset[\"Cabin\"].isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LgppuuTjuzYM",
        "outputId": "b44afb1c-45ad-4596-efbf-b0e43eab65f4"
      },
      "execution_count": 169,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1007"
            ]
          },
          "metadata": {},
          "execution_count": 169
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset[\"Cabin\"][dataset[\"Cabin\"].notnull()].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZLN0ICrDuzVt",
        "outputId": "f22eb960-babf-4a56-ccab-e312d19d68f0"
      },
      "execution_count": 170,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1      C85\n",
              "3     C123\n",
              "6      E46\n",
              "10      G6\n",
              "11    C103\n",
              "Name: Cabin, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 170
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Replace the Cabin number by the type of cabin 'X' if not\n",
        "dataset[\"Cabin\"] = pd.Series([i[0] if not pd.isnull(i) else 'X' for i in dataset['Cabin'] ])"
      ],
      "metadata": {
        "id": "pKQuT33YuzTv"
      },
      "execution_count": 171,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.countplot(dataset[\"Cabin\"],order=['A','B','C','D','E','F','G','T','X'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 341
        },
        "id": "opv7iq-_uzRe",
        "outputId": "085a57f4-5546-4509-f4e8-d70bb3445a9c"
      },
      "execution_count": 172,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.factorplot(y=\"Survived\",x=\"Cabin\",data=dataset,kind=\"bar\",order=['A','B','C','D','E','F','G','T','X'])\n",
        "g = g.set_ylabels(\"Survival Probability\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        },
        "id": "HfI2UrjWa1DS",
        "outputId": "7bc04ece-ce96-4cb5-d18e-c65b92493c97"
      },
      "execution_count": 173,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:3717: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
            "  warnings.warn(msg)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset = pd.get_dummies(dataset, columns = [\"Cabin\"],prefix=\"Cabin\")"
      ],
      "metadata": {
        "id": "pjJejR_ia1BN"
      },
      "execution_count": 174,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **4) Ticket**"
      ],
      "metadata": {
        "id": "mfVh3QGTeMYO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataset[\"Ticket\"].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JL9kHdrrvbCt",
        "outputId": "06d27469-8bb2-4b60-b7a8-7c59e1a0bb72"
      },
      "execution_count": 175,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0           A/5 21171\n",
              "1            PC 17599\n",
              "2    STON/O2. 3101282\n",
              "3              113803\n",
              "4              373450\n",
              "Name: Ticket, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 175
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Ticket = []\n",
        "for i in list(dataset.Ticket):\n",
        "  if not i.isdigit():\n",
        "    Ticket.append(i.replace('.','').replace('/','').strip().split(' ')[0])\n",
        "  else:\n",
        "    Ticket.append('X')\n",
        "\n",
        "dataset['Ticket'] = Ticket\n",
        "dataset['Ticket'].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rx8639WCvbAr",
        "outputId": "6017f90d-4551-43ad-bf50-efc82b7d2212"
      },
      "execution_count": 176,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0        A5\n",
              "1        PC\n",
              "2    STONO2\n",
              "3         X\n",
              "4         X\n",
              "Name: Ticket, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 176
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset = pd.get_dummies(dataset, columns = [\"Ticket\"], prefix=\"T\")"
      ],
      "metadata": {
        "id": "kvkPFvzwva-L"
      },
      "execution_count": 177,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create categorical values for Pclass\n",
        "dataset[\"Pclass\"] = dataset[\"Pclass\"].astype(\"category\")\n",
        "dataset = pd.get_dummies(dataset, columns = [\"Pclass\"],prefix=\"Pc\")"
      ],
      "metadata": {
        "id": "XG34XQKvva7l"
      },
      "execution_count": 178,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop useless variables \n",
        "dataset.drop(labels = [\"PassengerId\"], axis = 1, inplace = True)"
      ],
      "metadata": {
        "id": "Zi3Bejfzva5B"
      },
      "execution_count": 179,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "id": "pPDWe0pdva21",
        "outputId": "fcc2a38b-75d6-4369-cd05-c2878beb62e4"
      },
      "execution_count": 180,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Survived  Sex   Age  SibSp  Parch      Fare  Fsize  Single  SmallF  MedF  \\\n",
              "0       0.0    0  22.0      1      0  1.981001      2       0       1     0   \n",
              "1       1.0    1  38.0      1      0  4.266662      2       0       1     0   \n",
              "2       1.0    1  26.0      0      0  2.070022      1       1       0     0   \n",
              "3       1.0    1  35.0      1      0  3.972177      2       0       1     0   \n",
              "4       0.0    0  35.0      0      0  2.085672      1       1       0     0   \n",
              "\n",
              "   ...  T_STONO  T_STONO2  T_STONOQ  T_SWPP  T_WC  T_WEP  T_X  Pc_1  Pc_2  \\\n",
              "0  ...        0         0         0       0     0      0    0     0     0   \n",
              "1  ...        0         0         0       0     0      0    0     1     0   \n",
              "2  ...        0         1         0       0     0      0    0     0     0   \n",
              "3  ...        0         0         0       0     0      0    1     1     0   \n",
              "4  ...        0         0         0       0     0      0    1     0     0   \n",
              "\n",
              "   Pc_3  \n",
              "0     1  \n",
              "1     0  \n",
              "2     1  \n",
              "3     0  \n",
              "4     1  \n",
              "\n",
              "[5 rows x 67 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0656e156-dc3b-4f10-a562-df5e762c3cf6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Survived</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Fsize</th>\n",
              "      <th>Single</th>\n",
              "      <th>SmallF</th>\n",
              "      <th>MedF</th>\n",
              "      <th>...</th>\n",
              "      <th>T_STONO</th>\n",
              "      <th>T_STONO2</th>\n",
              "      <th>T_STONOQ</th>\n",
              "      <th>T_SWPP</th>\n",
              "      <th>T_WC</th>\n",
              "      <th>T_WEP</th>\n",
              "      <th>T_X</th>\n",
              "      <th>Pc_1</th>\n",
              "      <th>Pc_2</th>\n",
              "      <th>Pc_3</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.981001</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4.266662</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.070022</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3.972177</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.085672</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 67 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0656e156-dc3b-4f10-a562-df5e762c3cf6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0656e156-dc3b-4f10-a562-df5e762c3cf6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0656e156-dc3b-4f10-a562-df5e762c3cf6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 180
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **6. Modeling**\n",
        "---"
      ],
      "metadata": {
        "id": "xd4H9I4QwbA6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train = dataset[:train_len]\n",
        "test = dataset[train_len:]\n",
        "test.drop(labels=['Survived'],axis=1,inplace=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w-GQrMkhvaz5",
        "outputId": "85b83226-31b9-4c97-8695-b280984a5c15"
      },
      "execution_count": 181,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  errors=errors,\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 학습 데이터를 피처와 라벨로 나누기\n",
        "train['Survived'] = train['Survived'].astype(int)\n",
        "Y_train = train['Survived']\n",
        "X_train = train.drop(labels=['Survived'],axis=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wCBwnJVivava",
        "outputId": "533aa43f-1c19-4b87-88ed-e7b758c63209"
      },
      "execution_count": 182,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **6.1 Simple modeling**"
      ],
      "metadata": {
        "id": "5GxrUwwlxjrU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **6.1.1 Cross validate models**"
      ],
      "metadata": {
        "id": "uSwrCdhexeLa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "kfold = StratifiedKFold(n_splits=10)"
      ],
      "metadata": {
        "id": "dFR7defvvatQ"
      },
      "execution_count": 183,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Modeling step w/ different algorithms\n",
        "\n",
        "random_state = 2\n",
        "classifiers = []\n",
        "classifiers.append(SVC(random_state=random_state))\n",
        "classifiers.append(DecisionTreeClassifier(random_state=random_state))\n",
        "classifiers.append(AdaBoostClassifier(DecisionTreeClassifier(random_state=random_state),random_state=random_state,learning_rate=0.1))\n",
        "classifiers.append(RandomForestClassifier(random_state=random_state))\n",
        "classifiers.append(ExtraTreesClassifier(random_state=random_state))\n",
        "classifiers.append(GradientBoostingClassifier(random_state=random_state))\n",
        "classifiers.append(MLPClassifier(random_state=random_state))\n",
        "classifiers.append(KNeighborsClassifier())\n",
        "classifiers.append(LogisticRegression(random_state = random_state))\n",
        "classifiers.append(LinearDiscriminantAnalysis())"
      ],
      "metadata": {
        "id": "jFqINJ4avarF"
      },
      "execution_count": 184,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cv_results = []\n",
        "for classifier in classifiers:\n",
        "  cv_results.append(cross_val_score(classifier,X_train,Y_train,scoring='accuracy',cv=kfold,n_jobs=4))"
      ],
      "metadata": {
        "id": "Pn98MpTYvaop"
      },
      "execution_count": 185,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cv_means = []\n",
        "cv_std = []\n",
        "for cv_result in cv_results:\n",
        "  cv_means.append(cv_result.mean())\n",
        "  cv_std.append(cv_result.std())"
      ],
      "metadata": {
        "id": "zBZR6WDGvamQ"
      },
      "execution_count": 186,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cv_res = pd.DataFrame({'CrossValMeans': cv_means,'CrossValerrors': cv_std,'Algorithm':[\"SVC\",\"DecisionTree\",\"AdaBoost\",\n",
        "\"RandomForest\",\"ExtraTrees\",\"GradientBoosting\",\"MultipleLayerPerceptron\",\"KNeighboors\",\"LogisticRegression\",\"LinearDiscriminantAnalysis\"]})"
      ],
      "metadata": {
        "id": "2MdYkJuYvajq"
      },
      "execution_count": 187,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "g = sns.barplot('CrossValMeans','Algorithm',data=cv_res,palette='Set3',orient='h',**{'xerr':cv_std})\n",
        "g.set_xlabel('Mean Accuracy')\n",
        "g = g.set_title('Cross validation scores')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "Y8PMPVcVvahg",
        "outputId": "296d7831-864e-49b6-ed8d-8e6613ea8c05"
      },
      "execution_count": 188,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **6.1.2 Hyperparameter tunning for best models**"
      ],
      "metadata": {
        "id": "AvBdfGIj1nTo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **Adaboost**"
      ],
      "metadata": {
        "id": "mYXJ6gtn14yw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "DTC = DecisionTreeClassifier()\n",
        "\n",
        "adaDTC = AdaBoostClassifier(DTC, random_state=7)\n",
        "ada_param_grid = {\"base_estimator__criterion\" : [\"gini\", \"entropy\"],\n",
        "                  \"base_estimator__splitter\" :   [\"best\", \"random\"],\n",
        "                  \"algorithm\" : [\"SAMME\",\"SAMME.R\"],\n",
        "                  \"n_estimators\" :[1,2],\n",
        "                  \"learning_rate\":  [0.0001, 0.001, 0.01, 0.1, 0.2, 0.3,1.5]}\n",
        "\n",
        "gsadaDTC = GridSearchCV(adaDTC,param_grid=ada_param_grid,cv=kfold,scoring='accuracy',n_jobs=4,verbose=1)\n",
        "gsadaDTC.fit(X_train,Y_train)\n",
        "ada_best = gsadaDTC.best_estimator_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_smpz6OjvafS",
        "outputId": "10b717ff-2647-4b8e-b3c8-1bd04f30306d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 10 folds for each of 112 candidates, totalling 1120 fits\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gsadaDTC.best_score_"
      ],
      "metadata": {
        "id": "TfD3baA4vadE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **ExtraTrees**"
      ],
      "metadata": {
        "id": "RfA4q0Hz2h21"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ExtC = ExtraTreesClassifier()\n",
        "\n",
        "ex_param_grid = {\"max_depth\": [None],\n",
        "                 \"max_features\": [1, 3, 10],\n",
        "                 \"min_samples_split\": [2, 3, 10],\n",
        "                 \"min_samples_leaf\": [1, 3, 10],\n",
        "                 \"bootstrap\": [False],\n",
        "                 \"n_estimators\" :[100,300],\n",
        "                 \"criterion\": [\"gini\"]}\n",
        "\n",
        "gsExtC = GridSearchCV(ExtC,param_grid=ex_param_grid,cv=kfold,scoring='accuracy',n_jobs=4,verbose=1)\n",
        "gsExtC.fit(X_train,Y_train)\n",
        "\n",
        "# best estimator\n",
        "ExtC_best = gsExtC.best_estimator_\n",
        "\n",
        "# best score\n",
        "gsExtC.best_score_"
      ],
      "metadata": {
        "id": "N8X9e624vaa8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **RandomForest**"
      ],
      "metadata": {
        "id": "8hQ-9-Iy3JBQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "RFC = RandomForestClassifier()\n",
        "\n",
        "rf_param_grid = {\"max_depth\": [None],\n",
        "              \"max_features\": [1, 3, 10],\n",
        "              \"min_samples_split\": [2, 3, 10],\n",
        "              \"min_samples_leaf\": [1, 3, 10],\n",
        "              \"bootstrap\": [False],\n",
        "              \"n_estimators\" :[100,300],\n",
        "              \"criterion\": [\"gini\"]}\n",
        "\n",
        "\n",
        "gsRFC = GridSearchCV(RFC,param_grid = rf_param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n",
        "gsRFC.fit(X_train,Y_train)\n",
        "\n",
        "# best estimator\n",
        "RFC_best = gsRFC.best_estimator_\n",
        "\n",
        "# Best score\n",
        "gsRFC.best_score_"
      ],
      "metadata": {
        "id": "gqck0Y6_3Ir2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "GBC = GradientBoostingClassifier()\n",
        "gb_param_grid = {'loss' : [\"deviance\"],\n",
        "              'n_estimators' : [100,200,300],\n",
        "              'learning_rate': [0.1, 0.05, 0.01],\n",
        "              'max_depth': [4, 8],\n",
        "              'min_samples_leaf': [100,150],\n",
        "              'max_features': [0.3, 0.1] \n",
        "              }\n",
        "\n",
        "gsGBC = GridSearchCV(GBC,param_grid = gb_param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n",
        "gsGBC.fit(X_train,Y_train)\n",
        "\n",
        "# best estimator\n",
        "GBC_best = gsGBC.best_estimator_\n",
        "\n",
        "# Best score\n",
        "gsGBC.best_score_"
      ],
      "metadata": {
        "id": "4y4kuZQ43IpR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "SVMC = SVC(probability=True)\n",
        "svc_param_grid = {'kernel': ['rbf'], \n",
        "                  'gamma': [ 0.001, 0.01, 0.1, 1],\n",
        "                  'C': [1, 10, 50, 100,200,300, 1000]}\n",
        "\n",
        "gsSVMC = GridSearchCV(SVMC,param_grid = svc_param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n",
        "\n",
        "gsSVMC.fit(X_train,Y_train)\n",
        "\n",
        "# best estimator\n",
        "SVMC_best = gsSVMC.best_estimator_\n",
        "\n",
        "# Best score\n",
        "gsSVMC.best_score_"
      ],
      "metadata": {
        "id": "r8bhCcXt3InT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **6.1.3 Plot learning curves**"
      ],
      "metadata": {
        "id": "XbLNbHxa3gol"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n",
        "                        n_jobs=-1, train_sizes=np.linspace(.1, 1.0, 5)):#linspace: lineary spaced로 1차원 배열 만드는 함수\n",
        "\n",
        "    plt.figure()\n",
        "    plt.title(title)\n",
        "    if ylim is not None:\n",
        "        plt.ylim(*ylim)\n",
        "    plt.xlabel(\"Training examples\")\n",
        "    plt.ylabel(\"Score\")\n",
        "\n",
        "    train_sizes, train_scores, test_scores = learning_curve(\n",
        "        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n",
        "    train_scores_mean = np.mean(train_scores, axis=1)\n",
        "    train_scores_std = np.std(train_scores, axis=1)\n",
        "    test_scores_mean = np.mean(test_scores, axis=1)\n",
        "    test_scores_std = np.std(test_scores, axis=1)\n",
        "\n",
        "    plt.grid()\n",
        "    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n",
        "                     train_scores_mean + train_scores_std, alpha=0.1,\n",
        "                     color=\"r\")\n",
        "    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n",
        "                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n",
        "    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n",
        "             label=\"Training score\")\n",
        "    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n",
        "             label=\"Cross-validation score\")\n",
        "\n",
        "    plt.legend(loc=\"best\")\n",
        "    return plt\n",
        "\n",
        "g = plot_learning_curve(gsRFC.best_estimator_,\"RF mearning curves\",X_train,Y_train,cv=kfold)\n",
        "g = plot_learning_curve(gsExtC.best_estimator_,\"ExtraTrees learning curves\",X_train,Y_train,cv=kfold)\n",
        "g = plot_learning_curve(gsSVMC.best_estimator_,\"SVC learning curves\",X_train,Y_train,cv=kfold)\n",
        "g = plot_learning_curve(gsadaDTC.best_estimator_,\"AdaBoost learning curves\",X_train,Y_train,cv=kfold)\n",
        "g = plot_learning_curve(gsGBC.best_estimator_,\"GradientBoosting learning curves\",X_train,Y_train,cv=kfold)"
      ],
      "metadata": {
        "id": "oNcLbBpE3Iln"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **6.1.4 Feature importance of tree based classifiers**"
      ],
      "metadata": {
        "id": "YxW2_C6d5L5Y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "nrows=ncols=2\n",
        "fig, axes = plt.subplots(nrows=nrows,ncols=ncols,sharex='all',figsize=(15,15))\n",
        "\n",
        "names_classifiers = [('AdaBoosting',ada_best),('ExtraTrees',ExtC_best),('RandomForest',RFC_best),('GradientBoosting',GBC_best)]\n",
        "\n",
        "nclassifier = 0\n",
        "for row in range(nrows):\n",
        "  for col in range(ncols):\n",
        "    name = names_classifiers[nclassifier][0]\n",
        "    classifier = names_classifiers[nclassifier][1]\n",
        "    indices = np.argsort(classifier.feature_importances_)[::-1][:40]\n",
        "    g = sns.barplot(y=X_train.columns[indices][:40],x=classifier.feature_importances_[indices][:40],orient='h',ax=axes[row][col])\n",
        "    g.set_xlabel(\"Relative importance\",fontsize=12)\n",
        "    g.set_ylabel(\"Features\",fontsize=12)\n",
        "    g.tick_params(labelsize=9)\n",
        "    g.set_title(name + \" feature importance\")\n",
        "    nclassifier += 1"
      ],
      "metadata": {
        "id": "8w9nxRs33Iiv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **결과**\n",
        "      1. Pc_1, Pc_2, Pc_3 and Fare refer to the general social standing of passengers.\n",
        "      2. Sex and Title_2 (Mrs/Mlle/Mme/Miss/Ms) and Title_3 (Mr) refer to the gender.\n",
        "      3. Age and Title_1 (Master) refer to the age of passengers.\n",
        "      4. Fsize, LargeF, MedF, Single refer to the size of the passenger family."
      ],
      "metadata": {
        "id": "8mqk6dKr6xuJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "test_Survived_RFC = pd.Series(RFC_best.predict(test), name=\"RFC\")\n",
        "test_Survived_ExtC = pd.Series(ExtC_best.predict(test), name=\"ExtC\")\n",
        "test_Survived_SVMC = pd.Series(SVMC_best.predict(test), name=\"SVC\")\n",
        "test_Survived_AdaC = pd.Series(ada_best.predict(test), name=\"Ada\")\n",
        "test_Survived_GBC = pd.Series(GBC_best.predict(test), name=\"GBC\")\n",
        "\n",
        "ensemble_results = pd.concat([test_Survived_RFC,test_Survived_ExtC,test_Survived_AdaC,test_Survived_GBC, test_Survived_SVMC],axis=1)\n",
        "\n",
        "g= sns.heatmap(ensemble_results.corr(),annot=True)"
      ],
      "metadata": {
        "id": "u8xuvqrk3Igc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **6.2 Ensemble modeling**"
      ],
      "metadata": {
        "id": "dHuQDj2s7Y3l"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **6.2.1 Combining models**"
      ],
      "metadata": {
        "id": "8jF0hl5U7evb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "votingC = VotingClassifier(estimators=[('rfc', RFC_best), ('extc', ExtC_best),\n",
        "('svc', SVMC_best), ('adac',ada_best),('gbc',GBC_best)], voting='soft', n_jobs=4)\n",
        "\n",
        "votingC = votingC.fit(X_train, Y_train)"
      ],
      "metadata": {
        "id": "Ypzq2P1R3IeU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **6.3 Prediction**"
      ],
      "metadata": {
        "id": "pCvMwL4_7pzH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "test_Survived = pd.Series(votingC.predict(test), name=\"Survived\")\n",
        "results = pd.concat([IDtest,test_Survived],axis=1)\n",
        "results.to_csv(\"ensemble_python_voting.csv\",index=False)"
      ],
      "metadata": {
        "id": "x2vIb30x3Ibv"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
