{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "03.11 과제",
      "provenance": [],
      "authorship_tag": "ABX9TyNn5BZy/1ZqBw4yGaFyzXp/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/apeach01/Colab_ESAA/blob/main/03_11_%EA%B3%BC%EC%A0%9C.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 01. 머신러닝 개념\n",
        "#### **1. 머신러닝 (Machine Learning) :** 데이터를 기반으로 패턴을 학습하고 결과를 예측하는 알고리즘 기법\n",
        "#### **2. 머신러닝 분류**\n",
        "##### - **지도학습 (Supercised Learning)** : 분류, 회귀 등\n",
        "##### - **비지도학습 (Un-Supercised Learning)** :군집화, 차원축소 등\n",
        "##### - **강화학습 (Reinforcement Learning)** : 각각의 상황에 따라 어떤 행동을 해야 보상을 많이 받을 수 있는지 구하는 방법"
      ],
      "metadata": {
        "id": "oNSW5kcsMn2p"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 02. 넘파이 (Numpy)\n",
        "### 1. Numpy ndarray 개요\n",
        "* Numpy array() 함수는 파이썬의 리스트와 같은 다양한 인자를 입력 받아서 ndarray로 변환하는 기능을 수행함\n",
        "* 생성된 ndarray 배열의 shape 변수는 ndarray 크기, 즉 행과 열의 수를 튜플 형태로 가지고 있으며 이를 통해 ndarray 배열의 차원까지 알 수 있음\n"
      ],
      "metadata": {
        "id": "MtG0r_wkNga5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "array1=np.array([1,2,3]) # 1차원\n",
        "print('array1 type:',type(array1))\n",
        "print('array1 array 형태:',array1.shape)\n",
        "\n",
        "array2=np.array([[1,2,3],\n",
        "               [2,3,4]])\n",
        "print('array2 type:',type(array2))\n",
        "print('array2 array 형태:',array2.shape)\n",
        "\n",
        "array3=np.array([[1,2,3]]) # 2차원\n",
        "print('array3 type:',type(array3))\n",
        "print('array3 array 형태:',array3.shape,'\\n')\n",
        "\n",
        "print('array1 : {:0}차원, array2 : {:1}차원, array3 : {:2}차원'.format(array1.ndim,array2.ndim,array3.ndim))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C7xSRr0PTc81",
        "outputId": "3ed6bcbb-5149-4a59-fb8d-b3ac0df375e7"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "array1 type: <class 'numpy.ndarray'>\n",
            "array1 array 형태: (3,)\n",
            "array2 type: <class 'numpy.ndarray'>\n",
            "array2 array 형태: (2, 3)\n",
            "array3 type: <class 'numpy.ndarray'>\n",
            "array3 array 형태: (1, 3) \n",
            "\n",
            "array1 : 1차원, array2 : 2차원, array3 :  2차원\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### 2. ndarray의 데이터 타입\n",
        "* ndarray 내의 데이터 값은 **숫자(int형, float형), 문자열(string), 불(bool)** 등 모두 가능함\n",
        "* ndarray 내의 데이터 타입은 **모두 같은 데이터 타입만 가능** -> 리스트와의 차이점\n",
        "* ndarray 내의 데이터 타입은 dtype 속성으로 확인 가능함"
      ],
      "metadata": {
        "id": "WukUm1LtT06D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "list1 = [1, 2, 3]\n",
        "print(type(list1))\n",
        "array1 = np.array(list1)\n",
        "print(type(array1))\n",
        "print(array1, array1.dtype)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oSTUQHYYUKj5",
        "outputId": "ce255f40-5da8-4067-9ae8-1af5ab97e652"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'list'>\n",
            "<class 'numpy.ndarray'>\n",
            "[1 2 3] int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* list 안에 다른 데이터 유형이 섞여있는 경우 ndarray로 변경하면 데이터 크기가 더 큰 데이터 데이터 타입으로 자료형을 일괄 변환함\n",
        "  - 아래 예제에서는 list2의 데이터가 모두 string으로, list3는 모두 float형으로 변환됨"
      ],
      "metadata": {
        "id": "Ekma0ivKVBrO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "list2 = [1, 2, 'test']\n",
        "array2 = np.array(list2)\n",
        "print(array2, array2.dtype)\n",
        "\n",
        "list3 = [1, 2, 3.0]\n",
        "array3 = np.array(list3)\n",
        "print(array3, array3.dtype)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NlRUrlKZU1Uu",
        "outputId": "aaa32b60-4082-46bb-abaa-b5ae8c68158d"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['1' '2' 'test'] <U21\n",
            "[1. 2. 3.] float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* ndarray 내 데이터 값의 타입 변경을 할 경우, astype() method을 사용하면 됨\n",
        "  - 대용량 데이터를 만들 때 많은 메모리가 사용되기 때문에 보통 메모리를 절약하기 위해 데이터 타입을 변경함\n",
        "  - 파이썬 기반의 머신러닝 알고리즘은 대부분 메모리로 데이터를 전체 로딩한 다음, 이를 기반으로 알고리즘에 적용하므로, 이 때 수행속도가 느려지거나 메모리 부족으로 오류가 발생할 수 있음 -> 불필요한 큰 데이터의 경우에 데이터 값의 타입을 변경하는 것을 권장함"
      ],
      "metadata": {
        "id": "3g7uKurVVeDw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "array_int = np.array([1,2,3])\n",
        "array_float = array_int.astype('float64') # int형 데이터를 float형으로 변환하여 저장\n",
        "print(array_float, array_float.dtype)\n",
        "\n",
        "array_int1 = array_float.astype('int32') # float형을 다시 int형으로 변환\n",
        "print(array_int1, array_int1.dtype)\n",
        "\n",
        "array_float1 = np.array([1.1, 2.1, 3.1]) # float형 배열\n",
        "array_int2 = array_float1.astype('int32') \n",
        "print(array_int2, array_int2.dtype)"
      ],
      "metadata": {
        "id": "DXYpwF_9U51E"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### 3. ndarray 편하게 생성하기\n",
        "* 특정 크기와 차원을 가진 ndarray를 연속값이나 0과 1로 초기화할 필요가 있음\n",
        "* **arange(), zeros(), ones()**를 사용해 쉽게 ndarray를 생성할 수 있음\n",
        "* 주로 테스트용으로 데이터를 만들거나 대규모 데이터를 일괄적으로 초기화할 때 사용됨"
      ],
      "metadata": {
        "id": "yU0AV_vHWAI5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sequence_array=np.arange(10) # stop값만 부여\n",
        "print(sequence_array)\n",
        "print(sequence_array.dtype,sequence_array.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yzjXtP9dXAcd",
        "outputId": "f2c6364e-ebe3-4289-a108-c72d2fa6f52e"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0 1 2 3 4 5 6 7 8 9]\n",
            "int64 (10,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* **arange()** : 지정한 범위의 값을 순차적으로 ndarray 값으로 반환함\n",
        "  - 파이썬의 range() 함수와 유사함\n",
        "  - 아래처럼 stop 값을 지정하면 0~ (N-1)까지의 연속값으로 구성된 1차원 ndarray를 만들 수 있음"
      ],
      "metadata": {
        "id": "NkTGEe6RXIPF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.arange(5))\n",
        "print(np.arange(1,10,3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w43yq_amYAXB",
        "outputId": "06dd96aa-4fcd-4738-fb8e-7505b164e403"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0 1 2 3 4]\n",
            "[1 4 7]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* **zeros()** : 모든 값을 0으로 채운 ndarray를 반환함\n",
        "  - shape 값을 tuple 형태로 입력해야함\n",
        "  - datatype을 지정하지 않으면 default로 float64형 데이터를 가진 ndarray를 반환함"
      ],
      "metadata": {
        "id": "qJsCGEbkYVh2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "zero_array = np.zeros((3, 2), dtype = 'int32')\n",
        "print(zero_array)\n",
        "print(zero_array.dtype, zero_array.shape, '\\n')"
      ],
      "metadata": {
        "id": "TSxx9CIBYF3e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "* **ones()** : 모든 값을 1로 채운 ndarray를 반환함\n",
        "  - zeros()처럼 shape값을 tuple 형태로 입력해야함\n",
        "  - zeros()처럼 datatype을 지정하지 않으면 default로 float64형 데이터를 가진 ndarray를 반환함"
      ],
      "metadata": {
        "id": "dDJ-ArdnYsIO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "one_array = np.ones((3, 2)) # datatype을 입력 x\n",
        "print(one_array)\n",
        "print(one_array.dtype, one_array.shape)"
      ],
      "metadata": {
        "id": "IGtCGDq6YsX5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### 4. ndarray의 차원과 크기 변경하는 shape()\n",
        "* **reshape()** : ndarray를 특정 차원 및 크기로 변환함\n",
        "  - 변환하려는 크기(row, column)를 변수로 입력하면 됨\n",
        "  - 지정한 사이즈로 변경 불가하면 오류 발생함"
      ],
      "metadata": {
        "id": "5QsOtyGNZG6z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "array1 = np.arange(10)\n",
        "print('array1:\\n', array1)\n",
        "\n",
        "array2 = array1.reshape(2,5)\n",
        "print('array2:\\n', array2)\n",
        "\n",
        "array3 = array1.reshape(5,2)\n",
        "print('array3:\\n', array3)"
      ],
      "metadata": {
        "id": "PB4loS9babsR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "array1.reshape(4,3) # 오류 발생"
      ],
      "metadata": {
        "id": "If6Z53oAadEI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "* **reshape()**의 인자로 -1을 사용하면 원래 ndarray와 호환되는 새로운 shape로 변환됨\n",
        "  - array1은 1차원 ndarray로 0~9까지의 데이터를 가짐\n",
        "  - array1.reshape(-1,5)은 array1과 호환되는 2차원 ndarray이면서 column의 수가 5인 ndarray로 변환된 것\n",
        "  - array1.reshape(5,-1)은 반대로 array1과 호환되는 2차원 ndarray이면서 row의 수가 5인 ndarray로 변환된 것\n",
        "  - 하지만 -1을 사용해도 호환 불가능한 형태는 변환할 수 없음"
      ],
      "metadata": {
        "id": "sIQVvt0iafWI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "array1 = np.arange(10)\n",
        "print(array1)\n",
        "\n",
        "array2 = array1.reshape(-1,5)\n",
        "print(array2)\n",
        "print('array2 shape:', array2.shape)\n",
        "print()\n",
        "\n",
        "array3 = array1.reshape(5,-1)\n",
        "print(array3)\n",
        "print('array3 shape', array3.shape)"
      ],
      "metadata": {
        "id": "8eJRkeD4a98o"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 원본 ndarray가 어떤 형태라도 **reshape(-1,1)**는 2차원이고 column이 1개인 ndarray로 변환함\n",
        "  - **stack**이나 **concat**으로 여러 ndarray를 결합할 때, ndarray의 형태를 통일하기 위해 유용하게 사용됨"
      ],
      "metadata": {
        "id": "mgwhcbGIbCLR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "array1 = np.arange(8)\n",
        "array3d = array1.reshape((2,2,2))\n",
        "print('array3d: \\n', array3d.tolist())\n",
        "\n",
        "# 3차원 ndarray -> 2차원\n",
        "array5 = array3d.reshape(-1,1)\n",
        "print('array5 : \\n', array5.tolist()) # list로 변경\n",
        "print('array5 shape:', array5.shape)\n",
        "print()\n",
        "\n",
        "# 1차원 ndarray -> 2차원\n",
        "array6 = array1.reshape(-1,1)\n",
        "print('array6 : \\n', array6.tolist()) # list로 변경\n",
        "print('array6 shape:', array6.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wLZqjsXKbXy7",
        "outputId": "46c32935-11b9-473a-dc99-397fff2b179e"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "array3d: \n",
            " [[[0, 1], [2, 3]], [[4, 5], [6, 7]]]\n",
            "array5 : \n",
            " [[0], [1], [2], [3], [4], [5], [6], [7]]\n",
            "array5 shape: (8, 1)\n",
            "\n",
            "array6 : \n",
            " [[0], [1], [2], [3], [4], [5], [6], [7]]\n",
            "array6 shape: (8, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### 5. Numpy의 ndarray 데이터 세트 선택하기\n",
        "#### **인덱싱(indexing)**\n",
        "* ndarray 내 일부 데이터 세트 혹은 특정 데이터만을 선택할 수 있음\n",
        "* **특정 데이터 추출 (단일값 추출)** : 원하는 위치의 인덱스 값을 지정하면 해당 위치의 데이터를 반환함\n",
        "  - index는 항상 0부터 시작함\n",
        "  - list나 dictionary처럼 index로 negative integer 사용 가능함"
      ],
      "metadata": {
        "id": "ixDxAbXcbsFI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1차원 ndarray 생성\n",
        "array1 = np.arange(start=1, stop=10) \n",
        "print('array1: ', array1)\n",
        "\n",
        "value = array1[2] \n",
        "print('value: ', value)\n",
        "print(type(value)) \n",
        "\n",
        "# 특정값 추출\n",
        "print('맨 뒤의 값: ', array1[-1], ' 맨 뒤에서 두 번째 값: ', array1[-2])\n",
        "\n",
        "#index를 이용한 ndarray 데이터 값 수정\n",
        "array1[0] = 9\n",
        "array1[8] = 0\n",
        "print('array1: ', array1)\n",
        "\n",
        "# n차원 ndarray에서 단일 값 추출 (n>=2)\n",
        "array1d = np.arange(start = 1, stop = 10)\n",
        "array2d = array1d.reshape(3,3)\n",
        "print(array2d)\n",
        "\n",
        "print('(row=0, col=0) index가 가리키는 값 : ', array2d[0,0]) \n",
        "print('(row=0, col=1) index가 가리키는 값 : ', array2d[0,1])\n",
        "print('(row=1, col=0) index가 가리키는 값 : ', array2d[1,0])\n",
        "print('(row=2, col=2) index가 가리키는 값 : ', array2d[2,2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-r11dG3ucmCU",
        "outputId": "ac432101-1e88-402c-b14f-68c1d85afa59"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "array1:  [1 2 3 4 5 6 7 8 9]\n",
            "value:  3\n",
            "<class 'numpy.int64'>\n",
            "맨 뒤의 값:  9  맨 뒤에서 두 번째 값:  8\n",
            "array1:  [9 2 3 4 5 6 7 8 0]\n",
            "[[1 2 3]\n",
            " [4 5 6]\n",
            " [7 8 9]]\n",
            "(row=0, col=0) index가 가리키는 값 :  1\n",
            "(row=0, col=1) index가 가리키는 값 :  2\n",
            "(row=1, col=0) index가 가리키는 값 :  4\n",
            "(row=2, col=2) index가 가리키는 값 :  9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 슬라이싱(slicing) : ':'을 이용해 연속된 인덱스 상의 ndarray 추출함\n",
        "  - array[a:b]는 a ~ (b-1)까지 데이터 세트를 반환함\n",
        "  - 슬라이싱으로 추출된 데이터 세트의 datatype은 모두 ndarray임\n",
        "  - 시작과 종료 index는 생략이 가능함\n",
        "  - 2차원 ndarray에서 ',' 이용하여 row&column 인덱스를 지정하면 됨"
      ],
      "metadata": {
        "id": "T5SJtBGLc-_4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1차원 ndarray에서 슬라이싱\n",
        "array1 = np.arange(1,10)\n",
        "array4 = array1[:3] \n",
        "print(array4) # [1,2,3]\n",
        "\n",
        "array5 = array1[3:] \n",
        "print(array5) # [4,5,6,7,8,9]\n",
        "\n",
        "array6 = array1[:] \n",
        "print(array6) # [1,2,3,4,5,6,7,8,9]"
      ],
      "metadata": {
        "id": "ivUj_WGDdpB0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 2차원 ndarray에서 슬라이싱\n",
        "array1d = np.arange(1,10)\n",
        "array2d = array1d.reshape(3,3)\n",
        "print('array2d : \\n', array2d)\n",
        "\n",
        "print('aarray2d[0:2,0:2] : \\n', array2d[0:2,0:2])\n",
        "print('aarray2d[1:3,1:3] : \\n', array2d[1:3,1:3])\n",
        "print('aarray2d[1:3,:] : \\n', array2d[1:3,:])\n",
        "print('aarray2d[:,:] : \\n', array2d[:,:])\n",
        "print('aarray2d[:2,1:] : \\n', array2d[:2,1:])\n",
        "print('aarray2d[:2,0] : \\n', array2d[:2,0]) "
      ],
      "metadata": {
        "id": "5QMQWf7gd3pC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(array2d[0])\n",
        "print(array2d[1])\n",
        "print('aarray2d[0].shape :', array2d[0].shape, 'aarray2d[1].shape :', array2d[1].shape) "
      ],
      "metadata": {
        "id": "v1AoVlQWd-jO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 팬시 인덱싱 (Fancy Indexing) : 일정한 인덱싱 집합을 list나 ndarray 형태로 지정하여 해당 데이터의 ndarray를 반환함"
      ],
      "metadata": {
        "id": "YGK3E1kBeA1F"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "array1d = np.arange(1,10)\n",
        "array2d = array1d.reshape(3,3)\n",
        "print(array2d)\n",
        "\n",
        "array3 = array2d[[0,1],2]\n",
        "print('array2d[[0,1],2] => ', array3.tolist()) # [a02, a12] => [3,6]\n",
        "\n",
        "array4 = array2d[[0,1],0:2]\n",
        "print('array2d[[0,1],0:2] => ', array4.tolist()) # [[a00, a01], [a10, a11]] => [[1,2],[4,5]]\n",
        "\n",
        "array5 = array2d[[0,1]]\n",
        "print('array2d[[0,1]] => ', array5.tolist()) # [[a00, a01, a02], [a10, a11, a12]] => [[1,2,3],[4,5,6]]"
      ],
      "metadata": {
        "id": "RJToog6VeKUn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 불린 인덱싱 (Boolean Indexing) : 특정 조건에 해당되는지 True/False 값 인덱싱 집합을 기반으로 True에 해당되는 인덱스 위치에 있는 데이터의 ndarray를 반환함\n",
        "  - 조건 필터링과 검색을 동시에 할 수 있는 장점\n",
        "  - for 반복문이나 if-else 조건문보다 훨씬 간단함\n",
        "  - array > 5와 같은 조건식을 쓰면 True/False로 이루어진 ndarray 객체가 반환됨"
      ],
      "metadata": {
        "id": "YkVosSxXeL-i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "array1d = np.arange(1,10)\n",
        "array3 = array1d[array1d > 5]\n",
        "print('array1d > 5인 boolean indexing 결과 값 : ', array3)\n",
        "\n",
        "array1d > 5\n",
        "\n",
        "boolean_indexes = np.array([False, False, False, False, False, True, True, True, True])\n",
        "array3 = array1d[boolean_indexes]\n",
        "print('boolean 인덱스로 필터링 결과 : ', array3)"
      ],
      "metadata": {
        "id": "XZMaXBsReoCd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### 6. 행렬의 정렬\n",
        "* **행렬 정렬 : sort()**\n",
        "  - **np.sort()** : Numpy에서 sort() 호출함. 원래 행렬을 변경하지 않고, 정렬된 행렬을 새로 반환함.\n",
        "  - **ndarray.sort()** : 행렬 자체에서 sort()를 호출. 원래 행렬 자체를 정렬하며 반환 값은 None\n",
        "  - **내림차순**으로 정렬하기 위해서는 **[::-1]**을 적용함\n",
        "  - 2차원 이상의 행렬일 경우, **axis 축 값 설정**을 통해 row 방향이나 column 방향으로 정렬함"
      ],
      "metadata": {
        "id": "g_YfL443etcK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "org_array = np.array([3,1,9,5])\n",
        "print('원본 행렬 : ', org_array)\n",
        "\n",
        "sort_array1 = np.sort(org_array)\n",
        "print('np.sort() 호출 후 반환된 정렬 행렬', sort_array1)\n",
        "print('np.sort() 호출 후 원본 행렬', org_array)\n",
        "\n",
        "sort_array2 = org_array.sort()\n",
        "print('org_array.sort() 호출 후 반환된 정렬 행렬', sort_array2)\n",
        "print('org_array.sort() 호출 후 원본 행렬', org_array)\n",
        "\n",
        "sort_array1_desc = np.sort(org_array)[::1]\n",
        "print('내림차순으로 정렬', sort_array1_desc)\n",
        "\n",
        "array2d = np.array([[8,12],\n",
        "                    [7,1]])\n",
        "sort_array2d_axis0 = np.sort(array2d, axis = 0)\n",
        "print('row 방향으로 정렬:\\n', sort_array2d_axis0)\n",
        "\n",
        "sort_array2d_axis1 = np.sort(array2d, axis = 1)\n",
        "print('column 방향으로 정렬:\\n', sort_array2d_axis1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_zmwiTrbmg8k",
        "outputId": "ea612116-f5b9-48b2-fdca-de812df0439b"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "원본 행렬 :  [3 1 9 5]\n",
            "np.sort() 호출 후 반환된 정렬 행렬 [1 3 5 9]\n",
            "np.sort() 호출 후 원본 행렬 [3 1 9 5]\n",
            "org_array.sort() 호출 후 반환된 정렬 행렬 None\n",
            "org_array.sort() 호출 후 원본 행렬 [1 3 5 9]\n",
            "내림차순으로 정렬 [1 3 5 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 정렬된 행렬의 인덱스를 반환\n",
        "####  **argsort()**\n",
        "  - **np.argsort()** : 정렬 행렬의 원본 행렬 인덱스를 ndarry 형으로 반환함\n",
        "  - 넘파이의 ndarray는 메타 데이터를 가질 수 없기 때문에, 실제 값과 그 값이 뜻하는 메타 데이터를 별도의 ndarray에 가져야함"
      ],
      "metadata": {
        "id": "zZUGz_n9m0T-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "org_array = np.array([3,1,9,5])\n",
        "sort_indices = np.argsort(org_array)\n",
        "print(type(sort_indices)) \n",
        "print('행렬 정렬 시 원본 행렬의 인덱스 :', sort_indices) \n",
        "print(org_array) \n",
        "\n",
        "# 내림차순으로 정렬\n",
        "org_array = np.array([3,1,9,5])\n",
        "sort_indices_desc = np.argsort(org_array)[::-1]\n",
        "print('행렬 내림차순 정렬 시 원본 행렬의 인덱스 :', sort_indices_desc)\n",
        "\n",
        "# argsort()를 이용하여 성적순으로 이름 정렬\n",
        "import numpy as np\n",
        "name_array = np.array(['John', 'Mike', 'Sarah', 'Kate', 'Samuel'])\n",
        "score_array = np.array([78, 95, 84, 98, 88])\n",
        "sort_indices_asc = np.argsort(score_array)\n",
        "print('성적 오름차순 정렬 시 score_array의 인덱스', sort_indices_asc)\n",
        "print('성적 오름차순으로 name_array의 이름 출력', name_array[sort_indices_asc])"
      ],
      "metadata": {
        "id": "nUYXun9jnWjb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### 7. 선형대수학 연산\n",
        "##### 1) 행렬 곱\n",
        "  * Matrix Multiplication : np.dot 이용\n",
        "  * Transposed Matrix : transpose() 이용"
      ],
      "metadata": {
        "id": "Ozrb3hpFnoH8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Multiplication\n",
        "\n",
        "A = np.array([[1,2,3],\n",
        "              [4,5,6]])\n",
        "B = np.array([[7,8],\n",
        "              [9,10],\n",
        "              [11,12]])\n",
        "dot_product = np.dot(A,B)\n",
        "print('행렬 곱 결과: \\n', dot_product)\n",
        "\n",
        "# Transposed\n",
        "\n",
        "A = np.array([[1,2],\n",
        "              [3,4]])\n",
        "transpose_mat = np.transpose(A)\n",
        "print('A의 전치행렬: \\n', transpose_mat)"
      ],
      "metadata": {
        "id": "iLttNWXNn6M0"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
